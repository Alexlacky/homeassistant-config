# Blueprint metadata
blueprint:
  name: Scene On-Off schedule with state persistence
  description: A simple scene on-off schedule, with the addition of state persistence across disruptive events, making sure the target device is always in the expected state.
  domain: automation
  input:
    on_scene:
      name: On Scene
      description: Scene to turn On accessories
      selector:
        entity:
          domain: scene
    off_scene:
      name: Off Scene
      description: Scene to turn Off accessories
      selector:
        entity:
          domain: scene
    on_time:
      name: On Time
      description: Time when the target should be placed in the on state.
      default: '00:00'
      selector:
        time:
    off_time:
      name: Off Time
      description: Time when the target should be placed in the off state.
      default: '00:00'
      selector:
        time:
    trigger_at_homeassistant_startup:
      name: Trigger at Home Assistant startup
      description: Trigger the target state check and enforcement at Home Assistant startup.
      default: false
      selector:
        boolean:

# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  off_time: !input off_time
  on_time: !input on_time
  on_scene: !input on_scene
  off_scene: !input off_scene
  trigger_at_homeassistant_startup: !input trigger_at_homeassistant_startup
  # time format used by strptime
  time_fmt: '%H:%M:%S'
  # first define whether on_time or off_time is the first event to occur during a specific day
  first_event: '{{ on_time if strptime(on_time,time_fmt).time() < strptime(off_time,time_fmt).time() else off_time }}' #off_time 7:00:00
  second_event: '{{ on_time if strptime(on_time,time_fmt).time() >= strptime(off_time,time_fmt).time() else off_time }}' #on_time 19:00:00

mode: single
max_exceeded: silent

# trigger at specified time, home assistant startup or when the custom event is fired
trigger:
  - platform: time
    at:
      - !input on_time
      - !input off_time
  - platform: homeassistant
    event: start
# if triggered by the homeassistant platform check if the automation should be run, as specified by the user

condition:
  - condition: template
    value_template: '{{ trigger.platform!="homeassistant" or trigger_at_homeassistant_startup }}'
    
action:
  - choose:
      # if current time is in the range first_event...second_event the target must be in the first_event state
      - conditions:
          - condition: template
            value_template: '{{ now().time() >= strptime(first_event,time_fmt).time() and now().time() < strptime(second_event,time_fmt).time() }}'
        sequence:
          - service: scene.turn_on
            data:
              entity_id: '{{ on_scene if first_event == on_time else off_scene }}'

    # else current time is in the range second_event...23:59:59 or 00:00:00...first_event
    # the target must be in the second_event state
    default:
      - service: scene.turn_on
        data:
          entity_id: '{{ on_scene if second_event == on_time else off_scene }}'
