- platform: template
  sensors:
  
    # Harmony
    living_room_tv:
      friendly_name: "Activity"
      value_template: >
        {% if states.remote.living_room.attributes.current_activity == "PowerOff" %}
            Off
        {% else %}
            {{ states.remote.living_room.attributes.current_activity }}
        {% endif %}
    
    # Switcher sensors    
    switcher_aio_time_left:
      friendly_name: "Time Left"
      icon_template: mdi:timelapse
      value_template: >-
        {% if is_state('switcher_aio.time_left_sensor', 'unknown') or is_state('switcher_aio.time_left_sensor', 'off') %}
            off
        {% else %}
            {% set hour  = states.switcher_aio.time_left_sensor.state.split(':')[0] %}
            {% set min  = states.switcher_aio.time_left_sensor.state.split(':')[1] %}
            {% set sec  = states.switcher_aio.time_left_sensor.state.split(':')[2] %}
            {{ hour | int }}h {{ min | int }}m
        {% endif %}
    
    switcher_aio_auto_off_time:
      friendly_name: "Auto Off"
      icon_template: mdi:av-timer
      value_template: >-
        {% if is_state('switcher_aio.time_left_sensor', 'unknown') or is_state('switcher_aio.time_left_sensor', 'off') %}
            off
        {% else %}
            {% set hour  = states.switcher_aio.time_left_sensor.state.split(':')[0] %}
            {% set min  = states.switcher_aio.time_left_sensor.state.split(':')[1] %}
            {% set sec  = states.switcher_aio.time_left_sensor.state.split(':')[2] %}
            {% set seconds = hour | int *3600 + min | int * 60 + sec | int * 1  %}
            {{ ( now().timestamp() + seconds ) | timestamp_custom("%H:%M") }}
        {% endif %}
        
#    switcher_kis_time_left:
#      friendly_name: "Time Left (KIS)"
#      icon_template: mdi:timelapse
#      value_template: >-
#        {% if is_state('switch.boiler', 'unknown') or is_state('switch.boiler', 'off') %}
#            off
#        {% else %}
#            {% set hour  = states.switch.boiler.attributes.remaining_time.split(':')[0] %}
#            {% set min  = states.switch.boiler.attributes.remaining_time.split(':')[1] %}
#            {% set sec  = states.switch.boiler.attributes.remaining_time.split(':')[2] %}
#            {{ hour | int }}h {{ min | int }}m
#        {% endif %} 
        
#    switcher_kis_auto_off_time:
#      friendly_name: "Auto Off (KIS)"
#      icon_template: mdi:av-timer
#      value_template: >-
#        {% if is_state('switch.boiler', 'unknown') or is_state('switch.boiler', 'off') %}
#            off
#        {% else %}
#            {% set hour  = states.switch.boiler.attributes.remaining_time.split(':')[0] %}
#            {% set min  = states.switch.boiler.attributes.remaining_time.split(':')[1] %}
#            {% set sec  = states.switch.boiler.attributes.remaining_time.split(':')[2] %}
#            {% set seconds = hour | int *3600 + min | int * 60 + sec | int * 1  %}
#            {{ ( now().timestamp() + seconds ) | timestamp_custom("%H:%M") }}
#        {% endif %}
        
    # Sensibo Kids Room
    sensibo_kids_room_temp:
      friendly_name: "Kids Room Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.kids_room.attributes.current_temperature }}
        
    sensibo_kids_room_humidity:
      friendly_name: "Kids Room Humidity (Sensibo)"
      unit_of_measurement: "%"
      icon_template: mdi:water-percent
      value_template: >-
        {{ states.climate.kids_room.attributes.current_humidity }}
        
    sensibo_kids_room_target_temp:
      friendly_name: "Kids Room Target Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.kids_room.attributes.temperature }} 
        
    sensibo_kids_room_fan:
      friendly_name: "Kids Room Fan Mode (Sensibo)"
      icon_template: mdi:fan
      value_template: >-
        {% if states.climate.kids_room.attributes.fan_mode %}
            {{ states.climate.kids_room.attributes.fan_mode }}
        {% else %}      
            op_auto
        {% endif %}


    # Sensibo Bedroom
    sensibo_bedroom_temp:
      friendly_name: "Bedroom Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.bedroom.attributes.current_temperature }}
        
    sensibo_bedroom_humidity:
      friendly_name: "Bedroom Humidity (Sensibo)"
      unit_of_measurement: "%"
      icon_template: mdi:water-percent
      value_template: >-
        {{ states.climate.bedroom.attributes.current_humidity }}
        
    sensibo_bedroom_target_temp:
      friendly_name: "Bedroom Target Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.bedroom.attributes.temperature }} 
        
    sensibo_bedroom_fan:
      friendly_name: "Bedroom Fan Mode (Sensibo)"
      icon_template: mdi:fan
      value_template: >-
        {% if states.climate.bedroom.attributes.fan_mode %}
            {{ states.climate.bedroom.attributes.fan_mode }}
        {% else %}      
            op_auto
        {% endif %}


    # Sensibo Living Room
    sensibo_living_room_temp:
      friendly_name: "Living Room Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.living_room.attributes.current_temperature }}
        
    sensibo_living_room_humidity:
      friendly_name: "Living Room Humidity (Sensibo)"
      unit_of_measurement: "%"
      icon_template: mdi:water-percent
      value_template: >-
        {{ states.climate.living_room.attributes.current_humidity }}
        
    sensibo_living_room_target_temp:
      friendly_name: "Living Room Target Temperature (Sensibo)"
      unit_of_measurement: "°C"
      icon_template: mdi:thermometer
      value_template: >-
        {{ states.climate.living_room.attributes.temperature }} 
        
    sensibo_living_room_fan:
      friendly_name: "Living Room Fan Mode (Sensibo)"
      icon_template: mdi:fan
      value_template: >-
        {% if states.climate.living_room.attributes.fan_mode %}
            {{ states.climate.living_room.attributes.fan_mode }}
        {% else %}      
            op_auto
        {% endif %}
        

    # Xiaomi
    xiaomi_work_room_temp_battery:
      friendly_name: "Work Room Temperature"
      icon_template: mdi:battery
      unit_of_measurement: '%'
      value_template: >-
        {{ states.sensor.xiaomi_work_room_temperature.attributes.battery_level }}

    xiaomi_button_bedside_dima_battery:
      friendly_name: "Bedside Switch Dima"
      icon_template: mdi:battery
      unit_of_measurement: '%'
      value_template: >-
        {{ states.binary_sensor.button_bedside_dima.attributes.battery_level }}

    xiaomi_button_bedside_galit_battery:
      friendly_name: "Bedside Switch Dima"
      icon_template: mdi:battery
      unit_of_measurement: '%'
      value_template: >-
        {{ states.binary_sensor.button_bedside_galit.attributes.battery_level }}

    # Yeelight
    bedroom_ceiling_moonlight:
      friendly_name: "Bedroom Moonlight Mode"
      icon_template: mdi:brightness-4
      value_template: >-
        {% if is_state('light.bedroom_ceiling', 'unavailable') %}
            unavailable
        {% else %}
            {% if is_state('binary_sensor.bedroom_ceiling_nightlight', 'on') %}
                moonlight
            {% else %}
                normal
            {% endif %}
        {% endif %}


    # Life360
    life360_dima_battery:
      friendly_name: "Dima battery"
      icon_template: mdi:battery
      unit_of_measurement: '%'
      value_template: >-
        {{ states.device_tracker.life360_dima_trosman.attributes.battery }}  

    life360_galit_battery:
      friendly_name: "Galit battery"
      icon_template: mdi:battery
      unit_of_measurement: '%'
      value_template: >-
        {{ states.device_tracker.life360_galit.attributes.battery }}



# Synology NAS
- platform: synologydsm
  host: !secret synology_host
  username: !secret synology_username
  password: !secret synology_password
  monitored_conditions:
    - cpu_system_load
    - cpu_total_load
    - memory_real_usage
    - memory_available_real
    - memory_total_real
    - network_up
    - network_down
    - volume_size_used
    - volume_percentage_used
    - volume_size_total
    - disk_temp
    
# Dark Sky Weather
- platform: darksky
  api_key: !secret darksky_api_key
  forecast:
    - 0
    - 1
  monitored_conditions:
    - icon
    - temperature
    - apparent_temperature
    - humidity
    - precip_probability
    - precip_intensity
    - precip_type
    - pressure
    - wind_speed
    - wind_bearing
    - temperature_high
    - temperature_low
    - apparent_temperature_high
    - daily_summary
  scan_interval:
      # At least one of these must be specified:
      days: 0
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0


# SQL
- platform: sql
  db_url: !secret synology_db_connection
  queries:
    - name: DB size
      query: 'SELECT table_schema "hassio", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="hassio" GROUP BY table_schema;'
      column: 'value'
      unit_of_measurement: MB
    - name: Events size
      query: 'SELECT table_schema "hassio", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="hassio" and table_name="events" GROUP BY table_schema;'
      column: 'value'
      unit_of_measurement: MB
    - name: States size
      query: 'SELECT table_schema "hassio", Round(Sum(data_length + index_length) / 1024 / 1024, 1) "value" FROM information_schema.tables WHERE table_schema="hassio" and table_name="states" GROUP BY table_schema;'
      column: 'value'
      unit_of_measurement: MB





#- platform: mqtt
#  name: Bridge state
#  state_topic: "zigbee2mqtt/bridge/state"
#  icon: mdi:router-wireless


